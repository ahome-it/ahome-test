/*
 * Copyright (c) 2014,2015 Ahome' Innovation Technologies. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath(group: 'org.ajoberstar', name: 'grgit', version: '1.4.0')
        classpath(group: 'commons-codec', name: 'commons-codec', version: '1.10')
        classpath(group: 'commons-logging', name: 'commons-logging', version: '1.2')
        classpath(group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5')
    }
}

import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens
import java.net.InetAddress
import org.ajoberstar.grgit.Grgit

apply plugin: 'groovy'
apply plugin: 'war'
apply plugin: 'maven'

sourceCompatibility = 1.8

targetCompatibility = 1.8

version = '1.0.26.1'

repositories {
    mavenCentral()
    maven { url "${sonatype_snapshotURL}" }
}

sourceSets {
    main {
        resources {
            source groovy
        }
        groovy {
            srcDir 'src/main/groovy'
        }
    }
}

tasks.withType(GroovyCompile) {
    groovyOptions.optimizationOptions.indy = true
}

dependencies {
    runtime(group: 'org.postgresql', name: 'postgresql', version: '9.4-1203-jdbc42')
    runtime(group: 'com.ahome-it', name: 'ahome-tooling-server-rpc', version: '1.0.115-RELEASE')
    runtime(group: 'com.ahome-it', name: 'ahome-tooling-server-sql', version: '1.0.115-RELEASE')
    runtime(group: 'com.ahome-it', name: 'ahome-tooling-server-mongodb', version: '1.0.115-RELEASE')
    runtime(group: 'com.ahome-it', name: 'ahome-tooling-server-hazelcast', version: '1.0.115-RELEASE')
    runtime(group: 'com.ahome-it', name: 'ahome-tooling-server-vaadin-core', version: '1.0.100-SNAPSHOT')
    compile(group: 'com.ahome-it', name: 'ahome-tooling-server-rpc', version: '1.0.115-RELEASE')
    compile(group: 'com.ahome-it', name: 'ahome-tooling-server-sql', version: '1.0.115-RELEASE')
    compile(group: 'com.ahome-it', name: 'ahome-tooling-server-mongodb', version: '1.0.115-RELEASE')
    compile(group: 'com.ahome-it', name: 'ahome-tooling-server-hazelcast', version: '1.0.115-RELEASE')
    compile(group: 'com.ahome-it', name: 'ahome-tooling-server-vaadin-core', version: '1.0.100-SNAPSHOT')
    providedCompile(fileTree(dir: 'war/WEB-INF/lib', include: '*.jar'))
    providedCompile(group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0')
}

task('deleteConfigs', type: Delete) {
    FileTree tree = fileTree (dir: 'war/WEB-INF/classes/com/ait/ahome/server/config');
    tree.each { File file ->
        delete(file)
    }
}

task('filterConfigs', dependsOn: deleteConfigs, type: Copy) {
    from 'src/main/groovy/com/ait/ahome/server/config'
    into 'war/WEB-INF/classes/com/ait/ahome/server/config'
    filter(FixCrLfFilter)
    filter(ReplaceTokens, tokens: getFilterTokens())
}

def getFilterTokens() {
    [GRADLE_BUILD_ARTIFACT_ID: getProjectArtifactID(), GRADLE_BUILD_PROJECT_TITLE: getProjectTitle(), GRADLE_BUILD_USER: getBuildUser(), GRADLE_BUILD_DATE: getBuildDate(), GRADLE_JAVA_VERSION: getJavaVersion(), GRADLE_GIT_COMMIT_HASH: getBuildGITCommitHash(), GRADLE_GIT_COMMIT_USER: getBuildGITCommitUser(), GRADLE_GIT_COMMIT_MESSAGE: getBuildGITCommitMessage(), GRADLE_BUILD_SERVER_HOST: getBuildServerHost(), GRADLE_BUILD_SERVER_BUILD: getBuildServerBuild(), GRADLE_BUILD_MODULE_VERSION: getBuildModuleVersion()]
}

def getProjectArtifactID() {
    'ahome-test'
}

def getProjectTitle() {
    'Ahome-Test'
}

def getBuildModuleVersion() {
    version
}

def getBuildDate() {
    (new Date()).toString()
}

def getBuildServerHost() {
    try
    {
        InetAddress.getLocalHost().getHostName()
    }
    catch (Exception e)
    {
        "localhost"
    }
}

def getJavaVersion() {
    System.getProperty('java.version') ?: 'unknown'
}

def getBuildUser() {
    System.getProperty('user.name') ?: 'unknown'
}

def getBuildServerBuild() {
    System.getProperty('BUILD_DISPLAY_NAME') ?: 'Command line ' + GradleVersion.current().toString()
}

def getBuildGITCommitHash() {
    'https://github.com/ahome-it/' + getProjectArtifactID() + '/commit/' + Grgit.open(project.file('.')).head().id
}

def getBuildGITCommitUser() {
    Grgit.open(project.file('.')).head().committer.email
}

def getBuildGITCommitMessage() {
    Grgit.open(project.file('.')).head().shortMessage
}

war.dependsOn(filterConfigs)

war {
    manifest {
        attributes 'Implementation-Title': getProjectTitle(), 'Implementation-Version': getBuildModuleVersion()
    }
    from('war')
    webInf { from 'war/WEB-INF' }
    webXml = file('war/WEB-INF/web.xml')
    archiveName 'ROOT.war'
}